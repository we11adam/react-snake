{"version":3,"sources":["Snake.js","serviceWorker.js","index.js"],"names":["Tile","props","className","shouldHighlight","data-name","name","id","isBait","Snake","width","height","timer","newHead","allowedKeys","state","snake","x","y","bait","placeBait","handleArrowKey","bind","isTileOfSnake","updateDirection","this","head","neck","direction","Math","floor","random","tile","slice","clearInterval","alert","unshift","setState","pop","evt","key","goLeft","goUp","part","prevProps","prevState","snapshot","document","addEventListener","setInterval","crawl","removeEventListener","tiles","push","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b64cd60a.chunk.js","sourcesContent":["import React from 'react';\nimport './Snake.css';\n\nfunction Tile(props) {\n  return (\n    <div\n      className={'tile ' + (props.shouldHighlight ? 'hlt' : '')}\n      data-name={props.name}\n      id={props.isBait ? 'bait' : ''}\n    >\n    </div>\n  )\n}\n\nclass Snake extends React.Component {\n  constructor(props) {\n    super(props);\n    this.width = props.width;\n    this.height = props.height;\n    this.timer = null;\n    this.newHead = null;\n    this.allowedKeys = {\n      'ArrowLeft': 'left', 'ArrowRight': 'right', 'ArrowUp': 'up', 'ArrowDown': 'down'\n    };\n    this.state = {\n      snake: [\n        {x: 8, y: 12},\n        {x: 8, y: 13},\n        {x: 8, y: 14},\n      ],\n    };\n    this.state.bait = this.placeBait();\n    this.handleArrowKey = this.handleArrowKey.bind(this);\n    this.isTileOfSnake = this.isTileOfSnake.bind(this);\n    this.updateDirection();\n\n  }\n\n  updateDirection() {\n    const [head, neck] = this.state.snake;\n    this.direction = head.x === neck.x ? 'vertical' : 'horizontal';\n  }\n\n  placeBait() {\n    const width = this.width;\n    const height = this.height;\n    let x, y;\n    do {\n      x = Math.floor(Math.random() * width);\n      y = Math.floor(Math.random() * height);\n    } while (this.isTileOfSnake({x, y}));\n\n    return {x, y}\n  }\n\n  crawl() {\n    let {bait} = this.state;\n    const snake = this.state.snake.slice();\n    const [head, neck] = snake;\n    let newHead;\n\n    if (this.newHead) {\n      newHead = this.newHead;\n    } else if (head.x === neck.x) {\n      newHead = {\n        x: head.x,\n        y: 2 * head.y - neck.y\n      }\n    } else {\n      newHead = {\n        x: 2 * head.x - neck.x,\n        y: head.y\n      }\n    }\n\n    if (isWallHit(newHead, this.width, this.height)) {\n      clearInterval(this.timer);\n      return alert('game over');\n    }\n\n    if(this.isTileOfSnake(newHead)){\n      clearInterval(this.timer);\n      return alert('game over');\n    }\n\n    snake.unshift(newHead);\n    this.newHead = null;\n    if (newHead.x === bait.x && newHead.y === bait.y) {\n      bait = this.placeBait();\n      this.setState({\n        snake, bait\n      })\n    } else {\n      snake.pop();\n      this.setState({\n        snake\n      })\n    }\n  }\n\n  handleArrowKey(evt) {\n\n    const key = this.allowedKeys[evt.key];\n    if (!key) {\n      return;\n    }\n\n    const [head] = this.state.snake;\n\n    if (this.direction === \"vertical\" && (key === 'left' || key === 'right')) {\n      const goLeft = key === 'left';\n      this.newHead = {\n        x: head.x + (goLeft ? -1 : 1),\n        y: head.y\n      };\n    }\n\n    if (this.direction === \"horizontal\" && (key === 'up' || key === 'down')) {\n      const goUp = key === 'up';\n      this.newHead = {\n        x: head.x,\n        y: head.y + (goUp ? 1 : -1)\n      };\n    }\n\n  }\n\n  isTileOfSnake(tile) {\n    for (let part of this.state.snake) {\n      if (part.x === tile.x && part.y === tile.y) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.updateDirection();\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleArrowKey);\n    this.timer = setInterval(() => {\n      this.crawl();\n    }, 250)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    document.removeEventListener('keydown', this.handleArrowKey);\n  }\n\n  render() {\n    const {width, height} = this.props;\n    const bait = this.state.bait;\n    const tiles = [];\n    let y = height - 1;\n    while (y >= 0) {\n      let x = 0;\n      while (x < width) {\n        tiles.push(\n          <Tile\n            isBait={bait.x === x && bait.y === y}\n            shouldHighlight={this.isTileOfSnake({x, y})}\n            key={`${x}-${y}`}\n            name={`${x}-${y}`}\n          />);\n        x++;\n      }\n      y--;\n    }\n    return tiles;\n  }\n}\n\n\nfunction isWallHit(tile, width, height) {\n  return tile.x < 0 ||\n    tile.y < 0 ||\n    tile.x === width ||\n    tile.y === height;\n}\n\nexport default Snake;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Snake is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Snake from './Snake';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Snake width={20} height={20} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}